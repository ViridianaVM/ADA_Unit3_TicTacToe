{"version":3,"sources":["components/Square.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","onClick","onClickCallback","id","value","className","Board","squareList","squares","squaresOneDimension","idx","length","concat","map","square","generateSquareComponents","generateSquares","currentId","row","push","col","App","useState","setSquares","currentPlayer","setPlayer","gameOver","tieCounter","countRowX","countRowO","countColX","countColO","diagonalX","diagonalO","inverseDiagonalX","inverseDiagonalO","checkForWinner","clearSquares","tempSquares","changePlayer","squareVal","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.07fd6305.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Square.css'\n\nconst Square = (props) => {\n  // For Wave 1 enable this \n  //  Component to alert a parent \n  //  component when it's clicked on.\n  // console.log('This is in Square component, mi sqaure: ',props);\n\n  const handleClick = () => {\n    props.onClickCallback(props.id);\n  }\n\n  return <button onClick={handleClick}\n          id = {props.id}\n          value = {props.value}\n          className=\"square\">{props.value}</button>\n}\n\nSquare.propTypes = {\n  value: PropTypes.string.isRequired,\n  onClickCallback: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired,\n};\n\nexport default Square;\n","import React from 'react';\nimport './Board.css';\nimport Square from './Square';\nimport PropTypes from 'prop-types';\n\n\nconst generateSquareComponents = (squares, onClickCallback) => {\n  // Complete this for Wave 1 squares is a 2D Array, but \n  //  you need to return a 1D array of square components\n  \n  // console.log('My squares inputs: ', squares);\n  // console.log('My onClickCallBack inputs in Board: ', onClickCallback);\n\n  let squaresOneDimension = [];\n  for (let idx=0; idx<squares.length; idx++){\n    squaresOneDimension = squaresOneDimension.concat(squares[idx]);\n  }\n\n  let squareComponents = squaresOneDimension.map((square) => {\n    return (\n      <Square key={square.id}\n      id={square.id}\n      value={square.value}\n      onClickCallback={onClickCallback}\n      />\n    );\n  });\n\n  return squareComponents;\n}\n\n\n\n\n\n\nconst Board = ({ squares, onClickCallback }) => {\n  const squareList = generateSquareComponents(squares, onClickCallback);\n  // console.log('This is the square list',squareList);\n  return <div className=\"grid\" >\n    {squareList}\n  </div>\n}\n\nBoard.propTypes = {\n  squares: PropTypes.arrayOf(\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        value: PropTypes.string.isRequired\n      })\n    )\n  ),\n  onClickCallback: PropTypes.func.isRequired,\n};\n\nexport default Board;\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport Board from './components/Board';\n\nconst PLAYER_1 = 'X';\nconst PLAYER_2 = 'O';\n\nconst generateSquares = () => {\n  const squares = [];\n\n  let currentId = 0;\n\n  for (let row = 0; row < 3; row += 1) {\n    squares.push([]);\n    for (let col = 0; col < 3; col += 1) {\n      squares[row].push({\n        id: currentId,\n        value: '',\n      });\n      currentId += 1;\n    }\n  }\n\n  return squares;\n}\n\nconst App = () => {\n\n  // This starts state off as a 2D array of JS objects with\n  // empty value and unique ids.\n  const [squares, setSquares] = useState(generateSquares());\n  const [currentPlayer, setPlayer] = useState(PLAYER_1);\n  let gameOver = false;\n\n  // Wave 2\n  // You will need to create a method to change the square \n  //   When it is clicked on.\n  //   Then pass it into the squares as a callback\n  const updateTheSquare = (id) => {\n    if (gameOver){\n      return false;\n    }\n    const tempSquares = [];\n    let currentId = 0;\n    let changePlayer = false;\n    for (let row = 0; row < 3; row += 1) {\n      tempSquares.push([]);\n      for (let col = 0; col < 3; col += 1) {\n        let squareVal = squares[row][col].value;\n        if (currentId === id && (squares[row][col].value === '')){\n          squareVal=currentPlayer;\n          changePlayer = true;\n        }\n        tempSquares[row].push({\n          id: currentId,\n          value: squareVal,\n        });\n        currentId += 1;\n      }\n    }\n    setSquares(tempSquares);\n    if (changePlayer && (currentPlayer === PLAYER_1)){\n      setPlayer(PLAYER_2);\n    }\n    else if (changePlayer && (currentPlayer === PLAYER_2)){\n      setPlayer(PLAYER_1);\n    }\n    \n  }\n\n\n  \n\n\n  const checkForWinner = () => {\n    let tieCounter = 0;\n    // console.log('Esto es lo que recibo en checkForWinner: ',squares);\n    // 1. Go accross each row and go down each column, to see if 3 squares in the same row match same value\n    for (let row = 0; row < 3; row += 1) {\n      let countRowX = 0;\n      let countRowO = 0;\n      let countColX = 0;\n      let countColO = 0;\n      for (let col = 0; col < 3; col += 1) {\n        // Rows\n        if (squares[row][col].value === 'X'){\n          countRowX += 1;\n          tieCounter += 1;\n        }\n        else if (squares[row][col].value === 'O'){\n          countRowO += 1;\n          tieCounter += 1;\n        }\n        // Columns\n        if (squares[col][row].value === 'X'){\n          countColX += 1;\n        }\n        else if (squares[col][row].value === 'O'){\n          countColO += 1;\n        }\n      }\n      if (countRowX === 3 || countColX === 3){\n        gameOver = true;\n        return ('Winner is X');\n      }\n      else if (countRowO === 3 || countColO === 3){\n        gameOver = true;\n        return ('Winner is O');\n      }\n    }\n\n    // 2. Go across each diagonal to see if all three squares have the same value.\n    let diagonalX = 0;\n    let diagonalO = 0;\n    let inverseDiagonalX = 0;\n    let inverseDiagonalO = 0;\n    const inverseIdx = 2;\n    for (let idx = 0; idx < 3; idx += 1) {\n      // Diagonal\n      if (squares[idx][idx].value === 'X'){\n        diagonalX += 1;\n      }\n      else if (squares[idx][idx].value === 'O'){\n        diagonalO += 1;\n      }\n      // Inverse Diagonal\n      if (squares[inverseIdx-idx][idx].value === 'X'){\n        inverseDiagonalX += 1;\n      }\n      else if (squares[inverseIdx-idx][idx].value === 'O'){\n        inverseDiagonalO += 1;\n      }\n    }\n    if (diagonalX === 3 || inverseDiagonalX === 3){\n      gameOver = true;\n      return ('Winner is X');\n    }\n    else if (diagonalO === 3 || inverseDiagonalO === 3){\n      gameOver = true;\n      return ('Winner is O');\n    }\n    if (tieCounter === 9){\n      return ('The game ends in a tie');\n    }\n    return (`Current player is ${currentPlayer}`)\n\n  }\n\n  const resetGame = () => {\n    // Complete in Wave 4\n    const clearSquares = generateSquares();\n    setSquares(clearSquares);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>React Tic Tac Toe</h1>\n        <h2>{checkForWinner()}</h2>\n        <button onClick={resetGame} className=\"ResetButton\">Reset Game</button>\n      </header>\n      <main>\n        <Board squares={squares} onClickCallback={updateTheSquare}/>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}